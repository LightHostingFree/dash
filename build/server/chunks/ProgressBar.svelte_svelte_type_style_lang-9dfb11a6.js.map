{"version":3,"file":"ProgressBar.svelte_svelte_type_style_lang-9dfb11a6.js","sources":["../../../../node_modules/@skeletonlabs/skeleton/dist/utilities/LightSwitch/lightswitch.js","../../../../node_modules/@skeletonlabs/skeleton/dist/utilities/LocalStorageStore/LocalStorageStore.js"],"sourcesContent":["// Lightswitch Service\nimport { get } from 'svelte/store';\n// DO NOT replace this â¬‡ import, it has to be imported directly\nimport { localStorageStore } from '../LocalStorageStore/LocalStorageStore.js';\n// Stores ---\n// TRUE: light, FALSE: dark\n/** Store: OS Preference Mode */\nexport const modeOsPrefers = localStorageStore('modeOsPrefers', false);\n/** Store: User Preference Mode */\nexport const modeUserPrefers = localStorageStore('modeUserPrefers', undefined);\n/** Store: Current Mode State */\nexport const modeCurrent = localStorageStore('modeCurrent', false);\n// Get ---\n/** Get the OS Preference for light/dark mode */\nexport function getModeOsPrefers() {\n    const prefersLightMode = window.matchMedia('(prefers-color-scheme: light)').matches;\n    modeOsPrefers.set(prefersLightMode);\n    return prefersLightMode;\n}\n/** Get the User for light/dark mode */\nexport function getModeUserPrefers() {\n    return get(modeUserPrefers);\n}\n/** Get the Automatic Preference light/dark mode */\nexport function getModeAutoPrefers() {\n    const os = getModeOsPrefers();\n    const user = getModeUserPrefers();\n    const modeValue = user !== undefined ? user : os;\n    return modeValue;\n}\n// Set ---\n/** Set the User Preference for light/dark mode */\nexport function setModeUserPrefers(value) {\n    modeUserPrefers.set(value);\n}\n/** Set the the current light/dark mode */\nexport function setModeCurrent(value) {\n    const elemHtmlClasses = document.documentElement.classList;\n    const classDark = `dark`;\n    value === true ? elemHtmlClasses.remove(classDark) : elemHtmlClasses.add(classDark);\n    modeCurrent.set(value);\n}\n// Lightswitch Utility\n/** Set the visible light/dark mode on page load. */\nexport function setInitialClassState() {\n    const elemHtmlClasses = document.documentElement.classList;\n    // Conditions\n    const condLocalStorageUserPrefs = localStorage.getItem('modeUserPrefers') === 'false';\n    const condLocalStorageUserPrefsExists = !('modeUserPrefers' in localStorage);\n    const condMatchMedia = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    // Add/remove `.dark` class to HTML element\n    if (condLocalStorageUserPrefs || (condLocalStorageUserPrefsExists && condMatchMedia)) {\n        elemHtmlClasses.add('dark');\n    }\n    else {\n        elemHtmlClasses.remove('dark');\n    }\n}\n// Auto-Switch Utility\n/** Automatically set the visible light/dark, updates on change. */\nexport function autoModeWatcher() {\n    const mql = window.matchMedia('(prefers-color-scheme: light)');\n    function setMode(value) {\n        const elemHtmlClasses = document.documentElement.classList;\n        const classDark = `dark`;\n        value === true ? elemHtmlClasses.remove(classDark) : elemHtmlClasses.add(classDark);\n    }\n    setMode(mql.matches);\n    mql.onchange = () => {\n        setMode(mql.matches);\n    };\n}\n","// Source: https://github.com/joshnuss/svelte-local-storage-store\n// https://github.com/joshnuss/svelte-local-storage-store/blob/master/index.ts\n// Represents version v0.4.0 (2023-01-18)\nimport { BROWSER } from 'esm-env';\nimport { writable as internal, get } from 'svelte/store';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst stores = {};\nfunction getStorage(type) {\n    return type === 'local' ? localStorage : sessionStorage;\n}\nexport function localStorageStore(key, initialValue, options) {\n    const serializer = options?.serializer ?? JSON;\n    const storageType = options?.storage ?? 'local';\n    function updateStorage(key, value) {\n        if (!BROWSER)\n            return;\n        getStorage(storageType).setItem(key, serializer.stringify(value));\n    }\n    if (!stores[key]) {\n        const store = internal(initialValue, (set) => {\n            const json = BROWSER ? getStorage(storageType).getItem(key) : null;\n            if (json) {\n                set(serializer.parse(json));\n            }\n            if (BROWSER) {\n                const handleStorage = (event) => {\n                    if (event.key === key)\n                        set(event.newValue ? serializer.parse(event.newValue) : null);\n                };\n                window.addEventListener('storage', handleStorage);\n                return () => window.removeEventListener('storage', handleStorage);\n            }\n        });\n        const { subscribe, set } = store;\n        stores[key] = {\n            set(value) {\n                updateStorage(key, value);\n                set(value);\n            },\n            update(updater) {\n                const value = updater(get(store));\n                updateStorage(key, value);\n                set(value);\n            },\n            subscribe\n        };\n    }\n    return stores[key];\n}\n"],"names":["get","internal","set"],"mappings":";;;ACMA,MAAM,MAAN,GAAe,EAAf,CAAA;AAIO,SAAS,iBAAhB,CAAkC,GAAlC,EAAuC,YAAvC,EAAqD,OAArD,EAA8D;AACvC,EAAvB,OAAA,EAAgC,UAAhC,IAA8C,IAA9C,CAAA;AACwB,EAAxB,OAAA,EAAiC,OAAjC,IAA4C,OAA5C,CAAA;AAMI,EAAJ,IAAQ,CAAC,MAAT,CAAgB,GAAG,CAAnB,EAAsB;AACd,IAAR,MAAc,KAAd,GAAsBC,QAAtB,CAA+B,YAA/B,EAA6C,CAACC,IAA9C,KAAsD;AAAA,KAa7C,CAbT,CAAA;AAcQ,IAAR,MAAc,EAAE,SAAhB,EAA2B,GAA3B,EAAA,GAAmC,KAAnC,CAAA;AACQ,IAAR,MAAA,CAAe,GAAG,CAAlB,GAAsB;AAAA,MACV,GADZ,CACgB,KADhB,EACuB;AAEP,QAAhB,GAAA,CAAoB,KAAK,CAAzB,CAAA;AAAyB,OAAzB;AACa,MACD,MADZ,CACmB,OADnB,EAC4B;AACZ,QAAhB,MAAsB,KAAtB,GAA8B,OAA9B,CAAsCF,eAAtC,CAA0C,KAAK,CAAC,CAAhD,CAAA;AAEgB,QAAhB,GAAA,CAAoB,KAAK,CAAzB,CAAA;AAAyB,OAAzB;AACa,MACD,SADZ;AACY,KAAZ,CAAA;AACA,GAAA;AAEI,EAAJ,OAAW,MAAX,CAAkB,GAAG,CAArB,CAAA;AACA,CAAA;ADzC6B,iBAA7B,CAA+C,eAA/C,EAAgE,KAAK,CAArE,CAAA;AAE+B,iBAA/B,CAAiD,iBAAjD,EAAoE,KAApE,CAA6E,CAA7E,CAAA;AAE2B,iBAA3B,CAA6C,aAA7C,EAA4D,KAAK,CAAjE"}