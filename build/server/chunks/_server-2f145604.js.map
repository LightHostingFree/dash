{"version":3,"file":"_server-2f145604.js","sources":["../../../../src/routes/api/maintainers/[domain]/host/+server.js"],"sourcesContent":["import { getJWT } from '$lib/jwt.js';\nimport { json } from '@sveltejs/kit';\nimport { env } from '$env/dynamic/private';\nimport { RegisterDomain, getUser, getEmail, RegisterHosting } from '$lib/api.js';\n\nexport async function GET({ url, cookies, params }) {\n\tlet jwt = cookies.get('jwt');\n\tlet session = await getJWT(jwt);\n\tlet apiKey;\n\n\tlet query = url.searchParams;\n\n\tif (!session && query.get('key')) apiKey = query.get('key');\n\telse if (!session) return json({ error: 'No session or api key provided' }, 400);\n\telse apiKey = session.token;\n\n\tlet user;\n\tif (session?.user) user = session.user;\n\telse user = await getUser(apiKey);\n\n\tlet username;\n\tif (session?.user?.login) username = session.user.login;\n\telse username = user.login;\n\n\tif (!username) return json({ error: 'Invalid API key.' }, 400);\n\n\tlet email;\n\tif (session?.emails) email = session.emails.find((email) => email.primary);\n\telse email = await getEmail(apiKey);\n\n\tif (!email) return json({ error: 'No primary email found.' }, 400);\n\temail = email.email;\n\n\tlet subdomain = params.domain;\n\t//make subdomain lowercase\n\tsubdomain = subdomain.toLowerCase();\n\n\tconst result = await RegisterHosting(subdomain, username, email, apiKey);\n\tlet prurl = result.prurl;\n\tlet prnumber = result.prnumber;\n\tlet prereg = await fetch(\n\t\t`https://hosts.is-cool.me/api/preregister?jwt=${jwt}&pr=${prnumber}&domain=${subdomain}`\n\t);\n\tif (prereg.status != 200) return json({ error: 'Error while preregistering domain.' }, 400);\n\n\t// if result json contains ERROR, send error\n\tif (result.error) return json(result, 400);\n\telse return json(result, 200);\n}\n"],"names":["email"],"mappings":";;;;;;;;AAKA,eAAA,GAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,EAAA;AACA,EAAA,IAAA,GAAA,GAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA,EAAA,IAAA,OAAA,GAAA,MAAA,MAAA,CAAA,GAAA,CAAA,CAAA;AACA,EAAA,IAAA,MAAA,CAAA;AAEA,EAAA,IAAA,KAAA,GAAA,GAAA,CAAA,YAAA,CAAA;AAEA,EAAA,IAAA,CAAA,OAAA,IAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,IAAA,MAAA,GAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AAAA,OAAA,IACA,CAAA,OADA;AACA,IAAA,OAAA,IAAA,CAAA,EAAA,KAAA,EAAA,gCAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AAEA,EAAA,IAAA,IAAA,CAAA;AACA,EAAA,IAAA,OAAA,EAAA,IAAA;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;AAAA;AACA,IAAA,IAAA,GAAA,MAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA,EAAA,IAAA,QAAA,CAAA;AACA,EAAA,IAAA,OAAA,EAAA,IAAA,EAAA,KAAA;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AAAA;AACA,IAAA,QAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AAEA,EAAA,IAAA,CAAA,QAAA;AAAA,IAAA,OAAA,IAAA,CAAA,EAAA,KAAA,EAAA,kBAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AAEA,EAAA,IAAA,KAAA,CAAA;AACA,EAAA,IAAA,OAAA,EAAA,MAAA;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAAA,MAAA,KAAAA,MAAA,CAAA,OAAA,CAAA,CAAA;AAAA;AACA,IAAA,KAAA,GAAA,MAAA,QAAA,CAAA,MAAA,CAAA,CAAA;AAEA,EAAA,IAAA,CAAA,KAAA;AAAA,IAAA,OAAA,IAAA,CAAA,EAAA,KAAA,EAAA,yBAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AACA,EAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA;AAEA,EAAA,IAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA;AAEA,EAAA,SAAA,GAAA,SAAA,CAAA,WAAA,EAAA,CAAA;AAEA,EAAA,MAAA,MAAA,GAAA,MAAA,eAAA,CAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;AACA,EAAA,MAAA,CAAA,KAAA,CAAA;AACA,EAAA,IAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA;AACA,EAAA,IAAA,MAAA,GAAA,MAAA,KAAA;AAAA,IACA,CADA,6CAAA,EACA,GAAA,CADA,IAAA,EACA,QAAA,CADA,QAAA,EACA,SAAA,CADA,CAAA;AACA,GAAA,CAAA;AAEA,EAAA,IAAA,MAAA,CAAA,MAAA,IAAA,GAAA;AAAA,IAAA,OAAA,IAAA,CAAA,EAAA,KAAA,EAAA,oCAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AAGA,EAAA,IAAA,MAAA,CAAA,KAAA;AAAA,IAAA,OAAA,IAAA,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA;AAAA;AACA,IAAA,OAAA,IAAA,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA;AACA;;;;"}