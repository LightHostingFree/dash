{"version":3,"file":"_page.svelte-46f6827a.js","sources":["../../../../src/routes/domains/[domain]/edit/+page.svelte"],"sourcesContent":["<script>\n\texport let data;\n\timport { goto } from '$app/navigation';\n\timport Fa from 'svelte-fa';\n\timport { toastStore } from '@skeletonlabs/skeleton';\n\n\t//close icon\n\timport { faXmark } from '@fortawesome/free-solid-svg-icons';\n\timport { ProgressRadial } from '@skeletonlabs/skeleton';\n\timport { fade } from 'svelte/transition';\n\n\tlet saving = false;\n\tlet records = data.domain.record || [];\n\n\tlet availableRecords = [\n\t\t{\n\t\t\ttype: 'CNAME',\n\t\t\tallowMultiple: false\n\t\t},\n\t\t{\n\t\t\ttype: 'A',\n\t\t\tallowMultiple: true\n\t\t},\n\t\t{\n\t\t\ttype: 'URL',\n\t\t\tallowMultiple: false\n\t\t},\n\t\t{\n\t\t\ttype: 'MX',\n\t\t\tallowMultiple: true\n\t\t},\n\t\t{\n\t\t\ttype: 'TXT',\n\t\t\tallowMultiple: true\n\t\t}\n\t];\n\trecords.forEach((r) => {\n\t\tr.allowMultiple = availableRecords.find((ar) => ar.type === r.type).allowMultiple;\n\t});\n</script>\n\n<h2 class=\"h2\">Editing {data.domain.name}.is-a.dev</h2>\n<br />\n{#if !saving}\n\t<div in:fade={{ duration: 300 }} class=\"flex flex-col gap-5\">\n\t\t<select\n\t\t\tclass=\"select mb-2\"\n\t\t\ton:change={(e) => {\n\t\t\t\t//if now selected value is not empty, add it to records\n\t\t\t\tif (e.target.value !== '')\n\t\t\t\t\trecords = [...records, availableRecords.find((r) => r.type === e.target.value)];\n\n\t\t\t\te.target.value = '';\n\t\t\t}}\n\t\t>\n\t\t\t<option value=\"\" selected disabled> Add record </option>\n\t\t\t{#each availableRecords as record}\n\t\t\t\t{#if (!record.allowMultiple && records.find((r) => r.allowMultiple === false)) || records.find((r) => r.type === record.type)}\n\t\t\t\t\t<option value=\"\" disabled>{record.type}</option>\n\t\t\t\t{:else}\n\t\t\t\t\t<option value={record.type}>{record.type}</option>\n\t\t\t\t{/if}\n\t\t\t{/each}\n\t\t</select>\n\t\t{#if records.length > 0}\n\t\t\t{#each records as record}\n\t\t\t\t<div class=\"flex items-center gap-2\">\n\t\t\t\t\t<label class=\"label\" for={record.type}>{record.type}</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclass=\"input\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder={record.type}\n\t\t\t\t\t\tid={record.type}\n\t\t\t\t\t\tvalue={record.value || ''}\n\t\t\t\t\t\ton:change={(e) => (record.value = e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"btn variant-filled-error\"\n\t\t\t\t\t\ton:click={() => (records = records.filter((r) => r.type !== record.type))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Fa icon={faXmark} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{/each}\n\n\t\t\t<button\n\t\t\t\tclass=\"btn variant-filled-success mt-5\"\n\t\t\t\ton:click={async () => {\n\t\t\t\t\tsaving = true;\n\t\t\t\t\tlet toFetch = `/api/domains/${data.domain.name}/edit?`;\n\n\t\t\t\t\tlet toAdd = {\n\t\t\t\t\t\trecords: JSON.stringify(records)\n\t\t\t\t\t};\n\t\t\t\t\tfor (const [key, value] of Object.entries(toAdd)) {\n\t\t\t\t\t\ttoFetch += `${key}=${value}&`;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet response = await fetch(toFetch, {\n\t\t\t\t\t\tmethod: 'PATCH'\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((res) => res.json())\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t\treturn { error: true };\n\t\t\t\t\t\t});\n\t\t\t\t\tif (response.error) {\n\t\t\t\t\t\ttoastStore.trigger({\n\t\t\t\t\t\t\tbackground: 'variant-filled-error',\n\t\t\t\t\t\t\tmessage: `${response.error}`,\n\t\t\t\t\t\t\ttimeout: 3000\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsaving = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tsaving = false;\n\t\t\t\t\ttoastStore.trigger({\n\t\t\t\t\t\tbackground: 'variant-filled-success',\n\t\t\t\t\t\tmessage: `Successfully updated records.`,\n\t\t\t\t\t\ttimeout: 3000\n\t\t\t\t\t});\n\t\t\t\t\tgoto('/domains/' + data.domain.name);\n\t\t\t\t}}>Save</button\n\t\t\t>\n\t\t{:else}\n\t\t\t<p>Add a record to your domain to get started.</p>\n\t\t{/if}\n\t</div>\n{:else}\n\t<div in:fade={{ duration: 300 }} out:fade={{ duration: 300 }} class=\"flex flex-col gap-5\">\n\t\t<ProgressRadial class=\"mt-5\" size=\"small\" />\n\t</div>\n{/if}\n"],"names":["Fa"],"mappings":";;;;;;;AACA,EAAA,IAAA,EAAY,IAAZ,EAAA,GAAgB,OAAhB,CAAA;AAWK,EAAL,IAAK,OAAL,GAAe,IAAf,CAAoB,MAApB,CAA2B,MAA3B,IAAiC,EAAjC,CAAA;AAEA,EAAA,IAAK,gBAAL,GAAqB;AAAA,IAElB,EAAA,IAFH,EAES,OAFT,EAGG,aAHH,EAGkB,KAHlB,EAAA;AAGkB,IAGf,EAAA,IAHH,EAGS,GAHT,EAIG,aAJH,EAIkB,IAJlB,EAAA;AAIkB,IAGf,EAAA,IAHH,EAGS,KAHT,EAIG,aAJH,EAIkB,KAJlB,EAAA;AAIkB,IAGf,EAAA,IAHH,EAGS,IAHT,EAIG,aAJH,EAIkB,IAJlB,EAAA;AAIkB,IAGf,EAAA,IAHH,EAGS,KAHT,EAIG,aAJH,EAIkB,IAJlB,EAAA;AAIkB,GAAlB,CAAA;AAGC,EAAD,OAAA,CAAS,OAAT,CAAkB,CAAlB,CAAA,KAAmB;AACjB,IAAF,CAAA,CAAI,aAAJ,GAAoB,gBAApB,CAAqC,IAArC,CAA2C,CAA3C,EAAA,KAAkD,EAAlD,CAAqD,IAArD,KAA8D,CAA9D,CAAgE,IAAI,CAApE,CAAsE,aAAtE,CAAA;AAAsE,GAAtE,CAAA,CAAA;;;AAIA,EAAA,OAAA,CAAA,uBAAA,EAAA,MAAA,CAAwB,IAAxB,CAA6B,MAA7B,CAAoC,IAAI,CAAA,CAAxC;AAAwC;AAAA,EAAxC,CAAA,oHAAA,EAAA,IAAA,CAeU,gBAfV,EAe0B,CAf1B,MAAA,KAe0B;AAC1B,IAAA,OAAA,CAAA,EAAA,CAAW,MAAX,CAAkB,aAAlB,IAAmC,OAAnC,CAA2C,IAA3C,CAAiD,CAAjD,CAAA,KAAuD,CAAvD,CAAyD,aAAzD,KAA2E,KAAK,CAAhF,IAAsF,OAAtF,CAA8F,IAA9F,CAAoG,CAApG,CAAA,KAA0G,CAA1G,CAA4G,IAA5G,KAAqH,MAArH,CAA4H,IAAI,CAAhI,GACgC,CADhC,0BAAA,EACgC,MADhC,CACgC,MADhC,CACuC,IAAI,CAAA,CAD3C,SAAA,CAAA,GAGoB,CAHpB,OAAA,EAGoB,aAHpB,CAGoB,OAHpB,EAGoB,MAHpB,CAG2B,IAH3B,EAGkC,CAAA,CAAA,CAHlC,CAAA,EAGkC,MAHlC,CAGkC,MAHlC,CAGyC,IAAI,CAAA,CAH7C,SAAA,CAG6C,CAH7C,CAAA,CAAA;AAG6C,GAA7C,CAAA,CAAA;AAIA,EAAA,EAAO,OAAP,CAAe,MAAf,GAAwB,CAAxB,GAAA,CAAA,EAAA,IAAA,CACU,OADV,EACiB,CADjB,MAAA,KACiB;AAEc,IAA/B,OAA+B,CAA/B,yDAAA,EAA+B,aAA/B,CAA+B,KAA/B,EAA+B,MAA/B,CAAsC,IAAtC,EAA6C,CAAA,CAAA,CAA7C,CAAA,EAA6C,MAA7C,CAA6C,MAA7C,CAAoD,IAAI,CAAA,CAAxD;AAAwD,qCAAxD,EAAA,aAAA,CAAA,aAAA,EAImB,MAJnB,CAI0B,IAJ1B,EAI8B,CAAA,CAAA,CAJ9B,EAI8B,aAJ9B,CAI8B,IAJ9B,EAKU,MALV,CAKiB,IALjB,EAKqB,CAAA,CAAA,CALrB,EAKqB,aALrB,CAKqB,OALrB,EAMa,MANb,CAMoB,KANpB,IAM6B,EAN7B,EAM+B,CAAA,CAAA,CAN/B;AAM+B,8CAA/B,EAAA,kBAAA,CAAAA,IAAA,EAAA,IAAA,CAAA,CAAA,QAAA,CAAA,QAAA,EAAA,EAAA,IAAA,EAOgB,OAPhB,EAAA,EAOuB,EAPvB,EAOuB,EAAA,CAAA,CAPvB;AAOuB,UAAvB,CAAA,CAAA;AAAuB,GAAvB,CAAA,CAAA;;;;;;;"}