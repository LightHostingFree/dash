{"version":3,"file":"index2-0a6b26f5.js","sources":["../../../../node_modules/svelte/store/index.mjs"],"sourcesContent":["import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n"],"names":[],"mappings":";;AAGA,MAAM,gBAAN,GAAyB,EAAzB,CAAA;AAMA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC;AAC5B,EAAJ,OAAW;AAAA,IACH,SADR,EACmB,QADnB,CAC4B,KAD5B,EACmC,KAAK,CADxC,CAC0C,SAD1C;AAC0C,GAA1C,CAAA;AAEA,CAAA;AAMA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,GAAiC,IAAjC,EAAuC;AACnC,EAAJ,IAAQ,IAAR,CAAA;AACI,EAAJ,MAAU,WAAV,mBAAA,IAA4B,GAA5B,EAAA,CAAA;AACI,EAAJ,SAAa,GAAb,CAAiB,SAAjB,EAA4B;AACpB,IAAR,IAAY,cAAZ,CAA2B,KAA3B,EAAkC,SAAS,CAA3C,EAA8C;AAClC,MAAZ,KAAA,GAAoB,SAApB,CAAA;AACY,MAAZ,IAAgB,IAAhB,EAAsB;AACN,QAAhB,MAAsB,SAAtB,GAAkC,CAAC,gBAAnC,CAAoD,MAApD,CAAA;AACgB,QAAhB,KAAA,MAA2B,UAA3B,IAAyC,WAAzC,EAAsD;AAClC,UAApB,UAAA,CAA+B,CAAC,CAAhC,EAAA,CAAA;AACoB,UAApB,gBAAA,CAAqC,IAArC,CAA0C,UAA1C,EAAsD,KAAK,CAA3D,CAAA;AAA2D,SAA3D;AAEgB,QAAhB,IAAoB,SAApB,EAA+B;AACX,UAApB,KAAA,IAA6B,CAA7B,GAAiC,CAAjC,EAAoC,CAApC,GAAwC,gBAAxC,CAAyD,MAAzD,EAAiE,CAAjE,IAAsE,CAAtE,EAAyE;AACjD,YAAxB,gBAAA,CAAyC,CAAC,CAA1C,CAA4C,CAAC,CAA7C,CAA+C,gBAA/C,CAAgE,CAAhE,GAAoE,CAAC,CAAC,CAAtE,CAAA;AAAsE,WAAtE;AAEoB,UAApB,gBAAA,CAAqC,MAArC,GAA8C,CAA9C,CAAA;AAA8C,SAA9C;AACiB,OAAjB;AACa,KAAb;AACS,GAAT;AAEI,EAAJ,SAAa,MAAb,CAAoB,EAApB,EAAwB;AAChB,IAAR,GAAA,CAAY,EAAZ,CAAe,KAAK,CAAC,CAArB,CAAA;AAAqB,GAArB;AAEI,EAAJ,SAAa,SAAb,CAAuB,GAAvB,EAA4B,UAA5B,GAAyC,IAAzC,EAA+C;AACvC,IAAR,MAAc,UAAd,GAA2B,CAAC,GAA5B,EAAiC,UAAU,CAA3C,CAAA;AACQ,IAAR,WAAA,CAAoB,GAApB,CAAwB,UAAU,CAAlC,CAAA;AACQ,IAAR,IAAY,WAAZ,CAAwB,IAAxB,KAAiC,CAAjC,EAAoC;AACxB,MAAZ,IAAA,GAAmB,KAAnB,CAAyB,GAAG,CAA5B,IAAiC,IAAjC,CAAA;AAAiC,KAAjC;AAEQ,IAAR,GAAA,CAAY,KAAK,CAAjB,CAAA;AACQ,IAAR,OAAe,MAAM;AACT,MAAZ,WAAA,CAAwB,MAAxB,CAA+B,UAAU,CAAzC,CAAA;AACY,MAAZ,IAAgB,WAAhB,CAA4B,IAA5B,KAAqC,CAArC,IAA0C,IAA1C,EAAgD;AAChC,QAAhB,IAAA,EAAA,CAAA;AACgB,QAAhB,IAAA,GAAuB,IAAvB,CAAA;AAAuB,OAAvB;AACa,KAAb,CAAA;AACA,GAAA;AAEI,EAAJ,OAAW,EAAE,GAAb,EAAkB,MAAlB,EAA0B,SAA1B,EAAA,CAAA;AACA;;;;"}